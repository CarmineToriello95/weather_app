// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app/test/core/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i6;
import 'dart:typed_data' as _i8;

import 'package:dartz/dartz.dart' as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i17;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:weather_app/core/errors/failure.dart' as _i11;
import 'package:weather_app/features/weather/data/datasources/weather_forecast_remote_data_source.dart'
    as _i9;
import 'package:weather_app/features/weather/data/models/api_response_model.dart'
    as _i3;
import 'package:weather_app/features/weather/domain/entities/weather_entity.dart'
    as _i12;
import 'package:weather_app/features/weather/domain/repositories/weather_forecast_repository.dart'
    as _i10;
import 'package:weather_app/features/weather/domain/usecases/fetch_weather_forecast_by_city_usecase.dart'
    as _i13;
import 'package:weather_app/features/weather/presentation/bloc/weather_bloc.dart'
    as _i14;
import 'package:weather_app/features/weather/presentation/bloc/weather_bloc_event.dart'
    as _i16;
import 'package:weather_app/features/weather/presentation/bloc/weather_bloc_state.dart'
    as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponseModel_2 extends _i1.SmartFake
    implements _i3.ApiResponseModel {
  _FakeApiResponseModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i8.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i5.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i5.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WeatherForecastRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherForecastRemoteDataSource extends _i1.Mock
    implements _i9.WeatherForecastRemoteDataSource {
  MockWeatherForecastRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.ApiResponseModel> fetchWeatherForecastByCity(
          {required String? cityName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWeatherForecastByCity,
          [],
          {#cityName: cityName},
        ),
        returnValue:
            _i5.Future<_i3.ApiResponseModel>.value(_FakeApiResponseModel_2(
          this,
          Invocation.method(
            #fetchWeatherForecastByCity,
            [],
            {#cityName: cityName},
          ),
        )),
      ) as _i5.Future<_i3.ApiResponseModel>);
}

/// A class which mocks [WeatherForecastRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherForecastRepository extends _i1.Mock
    implements _i10.WeatherForecastRepository {
  MockWeatherForecastRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.Either<_i11.Failure, List<_i12.WeatherEntity>>>
      fetchWeatherForecastByCity({required String? cityName}) =>
          (super.noSuchMethod(
            Invocation.method(
              #fetchWeatherForecastByCity,
              [],
              {#cityName: cityName},
            ),
            returnValue: _i5.Future<
                    _i4.Either<_i11.Failure, List<_i12.WeatherEntity>>>.value(
                _FakeEither_3<_i11.Failure, List<_i12.WeatherEntity>>(
              this,
              Invocation.method(
                #fetchWeatherForecastByCity,
                [],
                {#cityName: cityName},
              ),
            )),
          ) as _i5.Future<_i4.Either<_i11.Failure, List<_i12.WeatherEntity>>>);
}

/// A class which mocks [FetchWeatherForecastByCityUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchWeatherForecastByCityUsecase extends _i1.Mock
    implements _i13.FetchWeatherForecastByCityUsecase {
  MockFetchWeatherForecastByCityUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.Either<_i11.Failure, List<_i12.WeatherEntity>>> call(
          {required String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5
            .Future<_i4.Either<_i11.Failure, List<_i12.WeatherEntity>>>.value(
            _FakeEither_3<_i11.Failure, List<_i12.WeatherEntity>>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i4.Either<_i11.Failure, List<_i12.WeatherEntity>>>);
}

/// A class which mocks [WeatherBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherBloc extends _i1.Mock implements _i14.WeatherBloc {
  MockWeatherBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.WeatherBlocState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i7.dummyValue<_i15.WeatherBlocState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i15.WeatherBlocState);

  @override
  _i5.Stream<_i15.WeatherBlocState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i15.WeatherBlocState>.empty(),
      ) as _i5.Stream<_i15.WeatherBlocState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i16.WeatherBlocEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i16.WeatherBlocEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i15.WeatherBlocState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i16.WeatherBlocEvent>(
    _i17.EventHandler<E, _i15.WeatherBlocState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i16.WeatherBlocEvent, _i15.WeatherBlocState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i17.Change<_i15.WeatherBlocState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
